{
  "version": 3,
  "sources": ["../esm/index.js"],
  "sourcesContent": ["import {promisify} from 'node:util';\nimport dgram from 'node:dgram';\nimport dns from 'dns-socket';\nimport got, {CancelError} from '@esm2cjs/got';\nimport isIp from 'is-ip';\n\nexport class IpNotFoundError extends Error {\n\tconstructor(options) {\n\t\tsuper('Could not get the public IP address', options);\n\t\tthis.name = 'IpNotFoundError';\n\t}\n}\n\nconst defaults = {\n\ttimeout: 5000,\n\tonlyHttps: false,\n};\n\nconst dnsServers = [\n\t{\n\t\tv4: {\n\t\t\tservers: [\n\t\t\t\t'208.67.222.222',\n\t\t\t\t'208.67.220.220',\n\t\t\t\t'208.67.222.220',\n\t\t\t\t'208.67.220.222',\n\t\t\t],\n\t\t\tname: 'myip.opendns.com',\n\t\t\ttype: 'A',\n\t\t},\n\t\tv6: {\n\t\t\tservers: [\n\t\t\t\t'2620:0:ccc::2',\n\t\t\t\t'2620:0:ccd::2',\n\t\t\t],\n\t\t\tname: 'myip.opendns.com',\n\t\t\ttype: 'AAAA',\n\t\t},\n\t},\n\t{\n\t\tv4: {\n\t\t\tservers: [\n\t\t\t\t'216.239.32.10',\n\t\t\t\t'216.239.34.10',\n\t\t\t\t'216.239.36.10',\n\t\t\t\t'216.239.38.10',\n\t\t\t],\n\t\t\tname: 'o-o.myaddr.l.google.com',\n\t\t\ttype: 'TXT',\n\t\t\ttransform: ip => ip.replace(/\"/g, ''),\n\t\t},\n\t\tv6: {\n\t\t\tservers: [\n\t\t\t\t'2001:4860:4802:32::a',\n\t\t\t\t'2001:4860:4802:34::a',\n\t\t\t\t'2001:4860:4802:36::a',\n\t\t\t\t'2001:4860:4802:38::a',\n\t\t\t],\n\t\t\tname: 'o-o.myaddr.l.google.com',\n\t\t\ttype: 'TXT',\n\t\t\ttransform: ip => ip.replace(/\"/g, ''),\n\t\t},\n\t},\n];\n\nconst type = {\n\tv4: {\n\t\tdnsServers: dnsServers.map(({v4: {servers, ...question}}) => ({\n\t\t\tservers, question,\n\t\t})),\n\t\thttpsUrls: [\n\t\t\t'https://icanhazip.com/',\n\t\t\t'https://api.ipify.org/',\n\t\t],\n\t},\n\tv6: {\n\t\tdnsServers: dnsServers.map(({v6: {servers, ...question}}) => ({\n\t\t\tservers, question,\n\t\t})),\n\t\thttpsUrls: [\n\t\t\t'https://icanhazip.com/',\n\t\t\t'https://api6.ipify.org/',\n\t\t],\n\t},\n};\n\nconst queryDns = (version, options) => {\n\tconst data = type[version];\n\n\tconst socket = dns({\n\t\tretries: 0,\n\t\tmaxQueries: 1,\n\t\tsocket: dgram.createSocket(version === 'v6' ? 'udp6' : 'udp4'),\n\t\ttimeout: options.timeout,\n\t});\n\n\tconst socketQuery = promisify(socket.query.bind(socket));\n\n\tconst promise = (async () => {\n\t\tlet lastError;\n\n\t\tfor (const dnsServerInfo of data.dnsServers) {\n\t\t\tconst {servers, question} = dnsServerInfo;\n\t\t\tfor (const server of servers) {\n\t\t\t\tif (socket.destroyed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst {name, type, transform} = question;\n\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst dnsResponse = await socketQuery({questions: [{name, type}]}, 53, server);\n\n\t\t\t\t\tconst {\n\t\t\t\t\t\tanswers: {\n\t\t\t\t\t\t\t0: {\n\t\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t} = dnsResponse;\n\n\t\t\t\t\tconst response = (typeof data === 'string' ? data : data.toString()).trim();\n\n\t\t\t\t\tconst ip = transform ? transform(response) : response;\n\n\t\t\t\t\tif (ip && isIp[version](ip)) {\n\t\t\t\t\t\tsocket.destroy();\n\t\t\t\t\t\treturn ip;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlastError = error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsocket.destroy();\n\n\t\tthrow new IpNotFoundError({cause: lastError});\n\t})();\n\n\tpromise.cancel = () => {\n\t\tsocket.destroy();\n\t};\n\n\treturn promise;\n};\n\nconst queryHttps = (version, options) => {\n\tlet cancel;\n\n\tconst promise = (async () => {\n\t\ttry {\n\t\t\tconst requestOptions = {\n\t\t\t\tdnsLookupIpVersion: version === 'v6' ? 6 : 4,\n\t\t\t\tretry: {\n\t\t\t\t\tlimit: 0,\n\t\t\t\t},\n\t\t\t\ttimeout: {\n\t\t\t\t\trequest: options.timeout,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst urls = [\n\t\t\t\t...type[version].httpsUrls,\n\t\t\t\t...(options.fallbackUrls ?? []),\n\t\t\t];\n\n\t\t\tlet lastError;\n\t\t\tfor (const url of urls) {\n\t\t\t\ttry {\n\t\t\t\t\t// Note: We use `.get` to allow for mocking.\n\t\t\t\t\tconst gotPromise = got.get(url, requestOptions);\n\t\t\t\t\tcancel = gotPromise.cancel;\n\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst response = await gotPromise;\n\n\t\t\t\t\tconst ip = (response.body || '').trim();\n\n\t\t\t\t\tif (ip && isIp[version](ip)) {\n\t\t\t\t\t\treturn ip;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlastError = error;\n\n\t\t\t\t\tif (error instanceof CancelError) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new IpNotFoundError({cause: lastError});\n\t\t} catch (error) {\n\t\t\t// Don't throw a cancellation error for consistency with DNS\n\t\t\tif (!(error instanceof CancelError)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t})();\n\n\tpromise.cancel = function () {\n\t\treturn cancel.apply(this);\n\t};\n\n\treturn promise;\n};\n\nconst queryAll = (version, options) => {\n\tlet cancel;\n\tconst promise = (async () => {\n\t\tlet response;\n\t\tconst dnsPromise = queryDns(version, options);\n\t\tcancel = dnsPromise.cancel;\n\t\ttry {\n\t\t\tresponse = await dnsPromise;\n\t\t} catch {\n\t\t\tconst httpsPromise = queryHttps(version, options);\n\t\t\tcancel = httpsPromise.cancel;\n\t\t\tresponse = await httpsPromise;\n\t\t}\n\n\t\treturn response;\n\t})();\n\n\tpromise.cancel = cancel;\n\n\treturn promise;\n};\n\nconst publicIp = {};\n\npublicIp.v4 = options => {\n\toptions = {\n\t\t...defaults,\n\t\t...options,\n\t};\n\n\tif (!options.onlyHttps) {\n\t\treturn queryAll('v4', options);\n\t}\n\n\tif (options.onlyHttps) {\n\t\treturn queryHttps('v4', options);\n\t}\n\n\treturn queryDns('v4', options);\n};\n\npublicIp.v6 = options => {\n\toptions = {\n\t\t...defaults,\n\t\t...options,\n\t};\n\n\tif (!options.onlyHttps) {\n\t\treturn queryAll('v6', options);\n\t}\n\n\tif (options.onlyHttps) {\n\t\treturn queryHttps('v6', options);\n\t}\n\n\treturn queryDns('v6', options);\n};\n\nexport default publicIp;\n\nexport {CancelError} from '@esm2cjs/got';\n"],
  "mappings": "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",
  "names": ["import_got", "dns", "dgram", "type", "data", "isIp", "got"]
}
