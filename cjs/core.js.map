{
  "version": 3,
  "sources": ["../esm/core.js"],
  "sourcesContent": ["import AggregateError from '@esm2cjs/aggregate-error'; // Use built-in when targeting Node.js 16\n\nexport class IpNotFoundError extends Error {\n\tconstructor(options) {\n\t\tsuper('Could not get the public IP address', options);\n\t\tthis.name = 'IpNotFoundError';\n\t}\n}\n\nexport function createPublicIp(publicIpv4, publicIpv6) {\n\treturn function publicIp(options) { // eslint-disable-line func-names\n\t\tconst ipv4Promise = publicIpv4(options);\n\t\tconst ipv6Promise = publicIpv6(options);\n\n\t\tconst promise = (async () => {\n\t\t\ttry {\n\t\t\t\tconst ipv6 = await ipv6Promise;\n\t\t\t\tipv4Promise.cancel();\n\t\t\t\treturn ipv6;\n\t\t\t} catch (ipv6Error) {\n\t\t\t\tif (!(ipv6Error instanceof IpNotFoundError)) {\n\t\t\t\t\tthrow ipv6Error;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\treturn await ipv4Promise;\n\t\t\t\t} catch (ipv4Error) {\n\t\t\t\t\tthrow new AggregateError([ipv4Error, ipv6Error]);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\n\t\tpromise.cancel = () => {\n\t\t\tipv4Promise.cancel();\n\t\t\tipv6Promise.cancel();\n\t\t};\n\n\t\treturn promise;\n\t};\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA2B;AAEpB,MAAM,wBAAwB,MAAM;AAAA,EAC1C,YAAY,SAAS;AACpB,UAAM,uCAAuC,OAAO;AACpD,SAAK,OAAO;AAAA,EACb;AACD;AAEO,SAAS,eAAe,YAAY,YAAY;AACtD,SAAO,SAAS,SAAS,SAAS;AACjC,UAAM,cAAc,WAAW,OAAO;AACtC,UAAM,cAAc,WAAW,OAAO;AAEtC,UAAM,WAAW,YAAY;AAC5B,UAAI;AACH,cAAM,OAAO,MAAM;AACnB,oBAAY,OAAO;AACnB,eAAO;AAAA,MACR,SAAS,WAAP;AACD,YAAI,EAAE,qBAAqB,kBAAkB;AAC5C,gBAAM;AAAA,QACP;AAEA,YAAI;AACH,iBAAO,MAAM;AAAA,QACd,SAAS,WAAP;AACD,gBAAM,IAAI,uBAAAA,QAAe,CAAC,WAAW,SAAS,CAAC;AAAA,QAChD;AAAA,MACD;AAAA,IACD,GAAG;AAEH,YAAQ,SAAS,MAAM;AACtB,kBAAY,OAAO;AACnB,kBAAY,OAAO;AAAA,IACpB;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": ["AggregateError"]
}
